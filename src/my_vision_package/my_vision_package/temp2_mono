import rclpy
from rclpy.node import Node
import cv2
from cv_bridge import CvBridge
from sensor_msgs.msg import Image, CameraInfo
from message_filters import ApproximateTimeSynchronizer, Subscriber

class StereoSyncNode(Node):
    def __init__(self):
        super().__init__('stereo_sync_node')
        self.bridge = CvBridge()

        # Subscribe to color image topics
        self.left_sub = Subscriber(self, Image, "/left/image_rect")
        self.right_sub = Subscriber(self, Image, "/right/image_rect")
        self.left_info_sub = Subscriber(self, CameraInfo, "/left/camera_info")
        self.right_info_sub = Subscriber(self, CameraInfo, "/right/camera_info")

        # Synchronizer
        self.sync = ApproximateTimeSynchronizer(
            [self.left_sub, self.right_sub, self.left_info_sub, self.right_info_sub],
            queue_size=10, slop=0.05
        )
        self.sync.registerCallback(self.sync_callback)

        # Publishers for grayscale rectified images
        self.left_pub = self.create_publisher(Image, "/stereo/left/image_rect", 10)
        self.right_pub = self.create_publisher(Image, "/stereo/right/image_rect", 10)
        self.left_info_pub = self.create_publisher(CameraInfo, "/stereo/left/camera_info", 10)
        self.right_info_pub = self.create_publisher(CameraInfo, "/stereo/right/camera_info", 10)

    def sync_callback(self, left_msg, right_msg, left_info, right_info):
        # Convert color images to grayscale
        left_cv_image = self.bridge.imgmsg_to_cv2(left_msg, desired_encoding="bgr8")
        right_cv_image = self.bridge.imgmsg_to_cv2(right_msg, desired_encoding="bgr8")

        left_gray = cv2.cvtColor(left_cv_image, cv2.COLOR_BGR2GRAY)
        right_gray = cv2.cvtColor(right_cv_image, cv2.COLOR_BGR2GRAY)

        # Convert back to ROS messages
        left_mono_msg = self.bridge.cv2_to_imgmsg(left_gray, encoding="mono8")
        right_mono_msg = self.bridge.cv2_to_imgmsg(right_gray, encoding="mono8")

        # Preserve timestamps
        left_mono_msg.header = left_msg.header
        right_mono_msg.header = right_msg.header

        # Publish grayscale rectified images
        self.left_pub.publish(left_mono_msg)
        self.right_pub.publish(right_mono_msg)
        self.left_info_pub.publish(left_info)
        self.right_info_pub.publish(right_info)

        self.get_logger().info("Published synchronized mono8 images")

def main(args=None):
    rclpy.init(args=args)
    node = StereoSyncNode()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
